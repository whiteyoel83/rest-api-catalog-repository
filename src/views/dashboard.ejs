<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Dashboard - Manage Users</title>
    <style>
      body {
        font-family: Arial, sans-serif;
        background-color: #f5f5f5;
        margin: 0;
        padding: 0;
      }
      .navbar {
        background-color: #007bff;
        padding: 10px 20px;
        color: #fff;
        display: flex;
        justify-content: space-between;
        align-items: center;
      }
      .navbar h1 {
        font-size: 1.5em;
        margin: 0;
      }
      .navbar button {
        background: #fff;
        color: #007bff;
        border: none;
        border-radius: 4px;
        padding: 8px 12px;
        cursor: pointer;
        font-size: 1em;
      }
      .navbar button:hover {
        background: #ddd;
      }
      .dashboard-container {
        padding: 20px;
      }
      .card {
        background: #fff;
        padding: 15px;
        margin-bottom: 15px;
        border-radius: 8px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      }
      .card h2 {
        margin: 0 0 10px 0;
        font-size: 1.2em;
        color: #333;
      }
      .card p {
        margin: 0;
        color: #555;
      }
      .actions {
        margin-top: 15px;
      }
      .actions button {
        padding: 5px 10px;
        margin-right: 5px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        color: #fff;
      }
      .edit-btn {
        background-color: #ffc107;
      }
      .delete-btn {
        background-color: #dc3545;
      }
      .add-user {
        margin-bottom: 15px;
      }
      .add-user input {
        padding: 10px;
        margin-right: 10px;
        border: 1px solid #ddd;
        border-radius: 4px;
      }
      .add-user button {
        padding: 10px;
        background-color: #28a745;
        color: #fff;
        border: none;
        border-radius: 4px;
        cursor: pointer;
      }
    </style>
  </head>
  <body>
    <div class="navbar">
      <h1>Dashboard - Manage Users</h1>
      <button id="logoutButton">Logout</button>
    </div>
    <div class="dashboard-container">
      <div class="add-user">
        <input
          type="text"
          id="newUsername"
          placeholder="Enter the username"
          required
        />
        <input
          type="email"
          id="newEmail"
          placeholder="Enter the email"
          required
        />
        <input
          type="password"
          id="newPassword"
          placeholder="Enter the password"
          required
        />
        <button id="addUserButton">Add User</button>
      </div>
      <div id="usersContainer"></div>
    </div>
    <script>
      const usersContainer = document.getElementById("usersContainer");

      async function loadUsers() {
        try {
          const response = await fetch("/api/v1/users", {
            method: "GET",
            headers: { "Content-Type": "application/json" },
          });

          if (response.ok) {
            const users = await response.json();
            usersContainer.innerHTML = "";

            users.data.forEach((user) => {
              const userCard = document.createElement("div");
              userCard.className = "card";
              userCard.innerHTML = `
              <h2>${user.username}</h2>
              <p>Email: ${user.email}</p>
              <div class="actions">
                <button class="edit-btn" onclick="editUser('${user.id}')">Edit</button>
                <button class="delete-btn" onclick="deleteUser('${user.id}')">Delete</button>
              </div>
            `;
              usersContainer.appendChild(userCard);
            });
          } else {
            console.error("Failed to load users");
          }
        } catch (error) {
          console.error("An error occurred:", error);
        }
      }

      async function addUser() {
        const username = document.getElementById("newUsername").value;
        const email = document.getElementById("newEmail").value;
        const password = document.getElementById("newPassword").value;

        if (!username || !email || !password) {
          alert("Please fill in all fields");
          return;
        }

        try {
          const response = await fetch("/api/v1/users", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ username, email, password }),
          });

          if (response.ok) {
            alert("User added successfully");
            loadUsers();
            notifyRabbitMQ(`User ${username} added.`);
          } else {
            console.error("Failed to add user");
          }
        } catch (error) {
          console.error("An error occurred:", error);
        }
      }

      async function deleteUser(userId) {
        try {
          const response = await fetch(`/api/v1/users/${userId}`, {
            method: "DELETE",
            headers: { "Content-Type": "application/json" },
          });

          if (response.ok) {
            alert("User deleted successfully");
            loadUsers();
            notifyRabbitMQ(`User with ID ${userId} deleted.`);
          } else {
            console.error("Failed to delete user");
          }
        } catch (error) {
          console.error("An error occurred:", error);
        }
      }

      async function editUser(userId) {
        const newUsername = prompt("Enter new username:");
        const newEmail = prompt("Enter new email:");

        if (!newUsername || !newEmail) {
          alert("Please provide both a new username and email");
          return;
        }

        try {
          const response = await fetch(`/api/v1/users/${userId}`, {
            method: "PUT",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ username: newUsername, email: newEmail }),
          });

          if (response.ok) {
            alert("User updated successfully");
            loadUsers();
            notifyRabbitMQ(`User with ID ${userId} updated.`);
          } else {
            console.error("Failed to update user");
          }
        } catch (error) {
          console.error("An error occurred:", error);
        }
      }

      async function notifyRabbitMQ(message) {
        try {
          await fetch("/rabbitmq/notify", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ message }),
          });
        } catch (error) {
          console.error("Error sending notification to RabbitMQ:", error);
        }
      }

      document
        .getElementById("addUserButton")
        .addEventListener("click", addUser);

      document
        .getElementById("logoutButton")
        .addEventListener("click", async () => {
          try {
            const response = await fetch("/api/v1/auth/logout-device", {
              method: "POST",
            });
            if (response.ok) {
              window.location.href = "/view/login";
            } else {
              console.error("Logout failed");
            }
          } catch (error) {
            console.error("An error occurred during logout:", error);
          }
        });

      loadUsers();
    </script>
  </body>
</html>
